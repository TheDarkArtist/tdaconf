#!/bin/bash

# Base directory where repo will be stored
REPO_DIR="$HOME/Workspace/tda/repos/tdaconf/"

# Directories in the home system that you want to copy
CONFIG_DIR="$HOME/.config"
LOCAL_DIR="$HOME/.local/share"
ZSHRC="$HOME/.zshrc"
ZSH_ALIASES="$HOME/.zsh_aliases"

# Best practice target directories under the repo
TARGET_DIRS=(
    "$REPO_DIR/.config/i3"
    "$REPO_DIR/.config/polybar"
    "$REPO_DIR/.config/rofi"
    "$REPO_DIR/.local/share/scripts"
    "$REPO_DIR/.config/nvim"
    "$REPO_DIR/bin"
)

# Ensure the target directory structure exists
for dir in "${TARGET_DIRS[@]}"; do
    [ ! -d "$dir" ] && mkdir -p "$dir"
done

# Directories to copy from home
declare -A SOURCES=(
    ["$CONFIG_DIR/i3"]="$REPO_DIR/.config/i3"
    ["$CONFIG_DIR/polybar"]="$REPO_DIR/.config/polybar"
    ["$CONFIG_DIR/rofi"]="$REPO_DIR/.config/rofi"
    ["$LOCAL_DIR/scripts"]="$REPO_DIR/.local/share/scripts"
    ["$CONFIG_DIR/nvim"]="$REPO_DIR/.config/nvim"
    ["$HOME/bin"]="$REPO_DIR/bin"
)

# Copy files ensuring no overwrite
for SOURCE in "${!SOURCES[@]}"; do
    DEST="${SOURCES[$SOURCE]}"
    if [ -d "$SOURCE" ]; then
        echo "Copying directory: $SOURCE to $DEST"
        cp -rn "$SOURCE"/* "$DEST"  # Prevent overwriting existing files
    elif [ -f "$SOURCE" ]; then
        echo "Copying file: $SOURCE to $DEST"
        cp -n "$SOURCE" "$DEST"  # Prevent overwriting files
    else
        echo "Source does not exist or not a file/folder: $SOURCE"
    fi
done

# Handle the .zshrc and .zsh_aliases explicitly (as files, not directories)
if [ -f "$ZSHRC" ]; then
    echo "Copying: $ZSHRC to $REPO_DIR/"
    cp -n "$ZSHRC" "$REPO_DIR/"
else
    echo "File not found: $ZSHRC"
fi

if [ -f "$ZSH_ALIASES" ]; then
    echo "Copying: $ZSH_ALIASES to $REPO_DIR/"
    cp -n "$ZSH_ALIASES" "$REPO_DIR/"
else
    echo "File not found: $ZSH_ALIASES"
fi

# Navigate to the repository
cd "$REPO_DIR" || { echo "Failed to change directory to $REPO_DIR"; exit 1; }

# Current date for commit
CURRENT_DATE=$(date +"%Y-%m-%d %H:%M:%S")

# Detect changes (added or modified)
CHANGED_FILES=$(git status --porcelain | grep -E "^(A|M)" | cut -c4-)

# If there are changes, commit them
if [[ -n "$CHANGED_FILES" ]]; then
    git add .
    git commit -m "Update configurations :: $CURRENT_DATE - Modified files: $CHANGED_FILES"
    git push origin main
else
    echo "No changes detected to commit."
fi

